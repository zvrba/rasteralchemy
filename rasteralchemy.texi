% $Id: rasteralchemy.texi,v 1.1.2.4 2004/09/25 08:40:21 zvrba Exp $
\input texinfo @c -*- texinfo -*-
@c %**start of header
@setfilename rasteralchemy.info
@settitle Raster Alchemy
@afourpaper
@c %**end of header

@titlepage
@title Raster Alchemy Manual
@author @v{Z}eljko Vrba
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2004 @v{Z}eljko Vrba@*
zvrba@@globalnet.hr@*
mordor@@fly.srk.fer.hr@*
@end titlepage

@ifnottex
@node Top, Introduction and features, (dir), (dir)
@top Raster Alchemy
This manual documents version 1.0 of the Raster Alchemy program.
@copyright{} 2004 @v{Z}eljko Vrba. All programs are licensed free of charge,
with NO WARRANTY, under GNU General Public License Version 2.

You can contact me at the following e-mail addresses:

@example
zvrba@@globalnet.hr
mordor@@fly.srk.fer.hr
@end example
@end ifnottex

@menu
* Introduction and features::   
* Prerequisites and building::  
* Usage::                       
@end menu

@node Introduction and features, Prerequisites and building, Top, Top
@unnumbered Introduction and features
This is yet another height field generator with flat OpenGL
display. The code contains a substantial copy of the original ``Height
Field Lab'' program written by John P. Beale. He released his code
under GNU GPL version 2. I cleaned up the code, embedded a ``nicer''
language interpreter (Lua), and developed the OpenGL display. The
latter was the real incentive -- Height Field Lab has crashed very
often when displaying the generated heightfields.

Instead of Lua I would have rather used Onyx (very nice stack-based
language).  RPN languages are more adapted for interactive
work. Sadly, Onyx is tightly bound to POSIX platforms, and one day I
plan to port this program to Win32.  And Lua has a really nice and
clean C API and excellent C++ binding in the form of luabind.

The name of the program itself is derived from the old DOS program called
``Image Alchemy''.

This version features:

@itemize @bullet
@item
Graphical user interface, written in FOX, to display the generated images
(only in 2D for now).

@item
Coloured display of complex (real and imaginary part) images.

@item
Embedded real programming language, Lua, for manipulating images.

@item
More user-friendly interactive mode.

@item
Image saving in ILM's EXR format.
@end itemize

Future plans (when I find the time):

@itemize @bullet
@item
3D graphical preview.

@item
Export to other formats (Povray mesh, or POT (16-bit GIF first used in
FractInt)).

@item
Procedural color map assignment (programmable in Lua).

@item
Other 2D image routines not directly tied to height fields. This includes
color RGB images.
@end itemize

@node Prerequisites and building, Usage, Introduction and features, Top
@chapter Prerequisites and building
This program is distributed in source form. Before building make sure that you
have all of these programs and libraries installed and ready for use:

@itemize @bullet
@item
Lua version 5: @url{http://www.lua.org}.

@item
Boost C++ libraries: @url{http://www.boost.org}

@item
luabind: @url{http://luabind.sourceforge.net}

@item
FOX GUI toolkit. Use version from 1.0 series! This program was compiled and
tested with version 1.0.40. Available from @url{http://www.fox-toolkit.org}.

@item
OpenEXR: @url{http://www.openexr.net}. This program was compiled with version
1.0.6. Maybe it will work with the now (September 2004)-current version 1.2.
It makes handling multi-channel and floating-point images really easy.

@item
readline library.
@end itemize

I am also providing a statically-linked i386 Linux binary on the same site
as the source.

@strong{Win32 compatibility note:} All of these libraries are also
available on the Win32 platform! However, I have used pthreads to make
possible for the user to enter commands in an xterm and manipulate the
display at the same time. If this part is replaced with a FOX-based console
window (or pthreads code ported to Win32 console), then it should be
possible to build this program for Win32. @strong{Please notify me if you
succeed in doing this!} Alternatively, it could be possibly built using
Cygwin.

Make process needs GNU make! Adjust include and library directories in
the make file. Be sure to include paths to all needed libraries! When
done, just execute ``make'' (or ``gmake'' on some systems).

@node Usage,  , Prerequisites and building, Top
@chapter Usage
This chapter describes the usage of features specific to this program. The
program has a built-in help for each command whose text was directly taken
from Height Field Lab help file (with minor modifications).

@menu
* Interactive mode::            
* Image objects::               
* Variables::                   
* Storing height fields::       
* Displaying height fields::    
@end menu

@node Interactive mode, Image objects, Usage, Usage
@section Interactive mode
Typing @samp{help()} in the terminal will list availabe commands. Typing
@samp{help('command')} will give the help for the specific command. Commands
are given with a short synopsis. Arguments named @samp{HF}, @samp{HFX},
@samp{X}, @samp{HFY} and @samp{Y} represent @emph{height fields}. Other
arguments stand for ordinary real numbers. Default argument values are
given in square brackets for each command. @strong{Note} that all commands
must be preceded by @samp{hf.} before invocation (but @emph{not} in the
@code{help()} function).


An example:

@example
bloom HFX HFY [SCALE=1.0] [XCENT=0.5] [YCENT=XCENT]
@end example

This command can be explicitly called as @samp{hf.bloom(I001, I002)}, or as
@samp{hf.bloom(I001, I002, 0.9)}. Note that arguments can be omitted and they
will then take their specified defaults (here @code{I001} and @code{I002} stand
for variables containing height fields).

Every command also has a user-friendly mode: typing just @samp{hf.bloom()}
will display the help for the command and then the user is prompted for
each argument value. Default (if any) is displayed in square brackets and
if the user wants to accept the default, he can just hit ENTER.

The @samp{images()} command will display all current image objects. The
@samp{reset()} command will destroy (and free memory) all current images.

@node Image objects, Variables, Interactive mode, Usage
@section Image objects
Each function returns an image as a result. The variable used to store the
function result is displayed after the function is executed. The generated
names always have the form @code{I___} where @code{___} stands for 3 decimal
digits.

One image object can't be assigned to more than one variable. If something
like @samp{A=hf.gforge(256)} is executed, then the program will display a
message that @code{I001} has been renamed to @code{A}. It is important to
know that after renaming, the variable @code{I001} @emph{does not exist any
longer}; i.e. its value is @code{nil}.

Self-assignment is handled gracefully (some functions modify its input
image and return it as the result).

Each image has defined the following attributes: @code{width}, @code{height};
@code{min}, @code{max} (minimum and maximum value in the picutre); @code{cplx}
(1 if the image is complex-valued, 0 else). 

For example,

@example
print(I001.width)
@end example

will print the width of image @code{I001}.

@node Variables, Storing height fields, Image objects, Usage
@section Variables
There are some variables controlling the HF functions. They are stored in the
@code{hf.PARAMS} table. Current variable values can be displayed by the
@samp{showvar()} command. Specifying the exact variable name (e.g.
@samp{showvar('tile_tol')} will display the help for the variable and its
value.

The variable value can be changed by simple assignment to the table, e.g.
@samp{hf.PARAMS['tile_tol']=0.02}.

Also two global variables, @code{PI} and @code{E}, are defined to stand for
the well-known mathematical constants.

@node Storing height fields, Displaying height fields, Variables, Usage
@section Storing height fields
For saving and loading images the functions @code{hf.save()} and
@code{hf.load()} are provided. The height fields are saved in EXR
format with 32-bit floating-point values. Real height fields have one
channel named @samp{H} while complex height fields have two channels
named @samp{RE} and @samp{IM}.

@node Displaying height fields,  , Storing height fields, Usage
@section Displaying height fields
The program defines one global @emph{object} named @code{RasterWindow}. It is
used to set images, as in @samp{RasterWindow:setImage(I001)}@footnote{This is
standard Lua syntax for method invocation on objects.} where @code{I001}
is the variable holding the height field.

The height field is displayed in the separate image window. The windows offers
two menus for controlling the display:

@itemize @bullet
@item
Display menu is the main display control.

@itemize @minus
@item
When the contrast for a channel is turned on, then channel values are adjusted
to the normalized range @math{[0,1]} before display. Otherwise the true values
are displayed.

@item
Rectangular/Polar are mutually exclusive toggles and have effect only on
complex images. In rectangular mode, channel 1 is real part, and channel 2 is
imaginary part. In polar mode, channel 1 is magnitude, and channel 2 is phase.
Phase is in the range @math{[-\pi/2, \pi/2]}.
@end itemize

@item
Complex menu controls the display of complex images.

@itemize @minus
@item
Channel 1/Channel 2 are mutually exclusive toggles that show only one channel
of the complex image.

@item
RGB/HSV submenus display both parts of the complex image simultaneously, either
in RGB or HSV mode. The numbers in parentheses are assignments of complex
parts to color components. 0 is complex channel 1, 1 is complex channel 2 and
2 is constant channel value.

@item
Constant channel value sets the color constant for color component numbered 2
in RGB/HSV menus. Since the complex image has only two components, and color
images have 3 components, the 3rd component is always made constant and equals
the value set by this parameter (which should be in range @math{[0,1]}).
@end itemize

@end itemize

@bye

